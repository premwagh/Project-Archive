"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from email.utils import parseaddr

from .base import env, BASE_DIR, DEBUG, FRONTEND_ORIGIN


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# https://django-environ.readthedocs.io/en/latest/types.html#environ-env-db-url
DATABASES = {
    "default": env.db_url('DATABASE_URL'),
}


# https://docs.djangoproject.com/en/4.2/ref/settings/#caches
# https://django-environ.readthedocs.io/en/latest/types.html#environ-env-cache-url
CACHES = {'default': env.cache_url('CACHE_URL', 'locmemcache://')}

# https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-ALLOWED_HOSTS
ALLOWED_HOSTS = env.json("ALLOWED_HOSTS", default=["*"])

# A list of trusted origins for unsafe requests (e.g. POST).
# https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-CSRF_TRUSTED_ORIGINS
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=[FRONTEND_ORIGIN])

# https://github.com/adamchainz/django-cors-headers#cors_allowed_origins-sequencestr
CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS", default=[FRONTEND_ORIGIN])


INSTALLED_APPS = [
    'core',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'rest_framework',
    'django_filters',
    'drf_spectacular',
    'taggit',
    'user',
    'project',
]

MIDDLEWARE = ['querycount.middleware.QueryCountMiddleware'] if DEBUG else []
MIDDLEWARE += [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 5}
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# AUTH_USER_MODEL: The model to use to represent a User.
# https://docs.djangoproject.com/en/4.2/topics/auth/customizing/#auth-custom-user
AUTH_USER_MODEL = 'user.User'


WSGI_APPLICATION = 'core.wsgi.APPLICATION'
# ASGI_APPLICATION = "core.asgi.application"

ROOT_URLCONF = 'core.urls'


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = BASE_DIR.joinpath('assets')
STATIC_URL = '/static/'

# STATICFILES_STORAGE
# Default: 'django.contrib.staticfiles.storage.StaticFilesStorage'
# https://docs.djangoproject.com/en/4.2/ref/settings/#staticfiles-storage
STATICFILES_STORAGE='django.contrib.staticfiles.storage.StaticFilesStorage'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR.joinpath('media')

# DEFAULT_FILE_STORAGE
# Default: 'django.core.files.storage.FileSystemStorage'
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-file-storage
DEFAULT_FILE_STORAGE='storages.backends.s3boto3.S3Boto3Storage'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Setup support for proxy headers
# https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-USE_X_FORWARDED_HOST
USE_X_FORWARDED_HOST = True
# https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-SECURE_PROXY_SSL_HEADER
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# The default value for the X-Frame-Options header used by XFrameOptionsMiddleware.
# https://docs.djangoproject.com/en/4.2/ref/clickjacking/
X_FRAME_OPTIONS = 'DENY' # Choices: 'DENY', 'SOMEORIGIN'


# Email Config
# EMAIL_BACKEND       - https://docs.djangoproject.com/en/4.2/ref/settings/#email-backend
# EMAIL_FILE_PATH     - https://docs.djangoproject.com/en/4.2/ref/settings/#email-file-path
# EMAIL_HOST_USER     - https://docs.djangoproject.com/en/4.2/ref/settings/#email-host-user
# EMAIL_HOST_PASSWORD - https://docs.djangoproject.com/en/4.2/ref/settings/#email-host-password
# EMAIL_HOST          - https://docs.djangoproject.com/en/4.2/ref/settings/#email-host
# EMAIL_PORT          - https://docs.djangoproject.com/en/4.2/ref/settings/#email-port
# EMAIL_USE_TLS       - https://docs.djangoproject.com/en/4.2/ref/settings/#email-use-tls
# EMAIL_USE_SSL       - https://docs.djangoproject.com/en/4.2/ref/settings/#email-use-ssl
#
# email_url
# https://django-environ.readthedocs.io/en/latest/types.html#environ-env-email-url
# https://django-environ.readthedocs.io/en/latest/tips.html#email-settings
vars().update(env.email_url('EMAIL_URL', default="smtp://:@localhost:25"))

DEFAULT_FROM_EMAIL = env.str('DEFAULT_FROM_EMAIL', "Project Archive <support@moviedb.wagh.dev>")

# Server errors:
# When DEBUG is False, Django will email the users listed in the ADMINS setting whenever your code
# raises an unhandled exception and results in an internal server error (strictly speaking, for any
# response with an HTTP status code of 500 or greater). This gives the administrators immediate
# notification of any errors. The ADMINS will get a description of the error, a complete Python
# traceback, and details about the HTTP request that caused the error

#    ADMINS:
#    A list of all the people who get code error notifications. When DEBUG=False and AdminEmailHandler
#    is configured in LOGGING (done by default), Django emails these people the details of exceptions
#    raised in the request/response cycle.

#    Each item in the list should be a tuple of (Full name, email address). Example:
#    [('John', 'john@example.com'), ('Mary', 'mary@example.com')]
#    ENV: ADMINS="Blake <blake@cyb.org>, Alice Judge <alice@cyb.org>"
ADMINS = env.list('ADMINS', parseaddr, default=[])

#    SERVER_EMAIL
#    The email address that error messages come from, such as those sent to ADMINS and MANAGERS.
SERVER_EMAIL = env.str('SERVER_EMAIL', "Project Archive <no-reply@localhost>")

# Logging
# https://docs.djangoproject.com/en/4.2/topics/logging/#configuring-logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple_format': {
            'format': '%(levelname)-8s: %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
    },
    'root': {
        'level': 'DEBUG' if DEBUG else 'INFO',
        'handlers': ['console'],
    },
    'loggers': {
        'project-archive': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'handlers': ['console'],
            'propagate': False
        },
        # 'django': {
        #     'level': 'INFO',
        #     'handlers': ['console'],
        #     'propagate': False
        # },
    }
}